# Classes
module JSON
  class Schema
    class Serializer
      @schema: untyped
      @options: Hash[bot, bot]

      def initialize: (untyped schema, ?nil options) -> Hash[bot, bot]
      def serialize: (untyped data) -> ((Array[bot] | Float | Hash[bot, bot] | Integer | String | bool)?)

      class DataWithContext < Struct
        attr_accessor data(): untyped
        attr_accessor context(): :__json_schema_serializer_arg2_not_given__
      end

      module WithContext
        ARG2_NOT_GIVEN: :__json_schema_serializer_arg2_not_given__

        def with_context!: (untyped arg1, ?:__json_schema_serializer_arg2_not_given__ arg2) -> DataWithContext
      end

      class Walker
        TimeWithZone: nil

        def self.walk: (nil schema, nil obj, bool required, bool using_default, Hash[untyped, untyped] options) -> ((Array[bot] | Float | Hash[bot, bot] | Integer | String | bool)?)
        def self.detect_type: (nil type_, nil obj) -> String?
        def self.type_coerce: (nil schema, String? type_, nil format, nil obj, bool required, bool using_default, Hash[untyped, untyped] options) -> ((Array[bot] | Float | Hash[bot, bot] | Integer | String | bool)?)
        def self.try_hash: (nil obj, (:additionalProperties | :default | :format | :items | :properties | :required | :type)? name) -> nil
        def self.is_primitive?: (nil obj) -> bool
      end
    end
  end
end
